
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Sum Of Multiples">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Sum Of Multiples</h2>
    <p>Solutions to sum-of-multiples in various languages.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#elm">Elm</a></li><li><a href="#roc">Roc</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="elm">Elm</a></h3>
            <a href="/languages/elm">Other Elm solutions.</a>
            <pre><code class="language-elm">{`module SumOfMultiples exposing (sumOfMultiples)


sumOfMultiples : List Int -> Int -> Int
sumOfMultiples divisors limit =
    let
        nums =
            List.range 1 (limit - 1)

        isDivisibleBy divs i =
            List.any (\\d -> modBy d i == 0) divs
    in
    nums
        |> List.filter (isDivisibleBy divisors)
        |> List.foldl (+) 0
`}</code></pre>
        

            <h3><a name="roc">Roc</a></h3>
            <a href="/languages/roc">Other Roc solutions.</a>
            <pre><code class="language-roc">{`module [sumOfMultiples]

sumOfMultiples : List U64, U64 -> U64
sumOfMultiples = \\factors, limit ->
    allMultiples = List.joinMap factors (\\factor -> multiplesLessThan factor limit)
    allMultiples |> Set.fromList |> Set.toList |> List.sum

multiplesLessThan = \\factor, limit ->
    if factor == 0 then
        [0]
        else

    List.range { start: At factor, end: Before limit, step: factor }
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>
    <script>
        Prism.languages['roc'] = Prism.languages['elm']
    </script>
<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
