
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Beer Song">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Beer Song</h2>
    <p>Solutions to beer-song in various languages.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#clojure">Clojure</a></li><li><a href="#elixir">Elixir</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="clojure">Clojure</a></h3>
            <a href="/languages/clojure">Other Clojure solutions.</a>
            <pre><code class="language-clojure">{`(ns beer-song
  (:require [clojure.string :as str]))

(defn- generalised-verse [num]
  (format
   "%s bottles of beer on the wall, %s bottles of beer.\\nTake one down and pass it around, %s bottles of beer on the wall.\\n"
   num
   num
   (dec num)))

(defn verse
  "Returns the nth verse of the song."
  ([num]
   (case num
     0 "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"
     1 "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"
     2 "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"
     (generalised-verse num))))

(defn sing
  "Given a start and an optional end, returns all verses in this interval. If
  end is not given, the whole song from start is sung."
  ([start] (sing start 0))
  ([start end] (str/join "\\n"
                         (->>
                          (range start (dec end) -1)
                          (map verse)))))
`}</code></pre>
        

            <h3><a name="elixir">Elixir</a></h3>
            <a href="/languages/elixir">Other Elixir solutions.</a>
            <pre><code class="language-elixir">{`defmodule BeerSong do
  @doc """
  Get a single verse of the beer song
  """
  @spec verse(integer) :: String.t()
  def verse(number) do
    case number do
      0 ->
        "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"

      1 ->
        "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"

      2 ->
        "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"

      number ->
        "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{
          number - 1
        } bottles of beer on the wall.\\n"
    end
  end

  @doc """
  Get the entire beer song for a given range of numbers of bottles.
  """
  @spec lyrics(Range.t()) :: String.t()
  def lyrics(range \\\\ 99..0) do
    range
    |> Enum.map(&verse(&1))
    |> Enum.join("\\n")
  end
end
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>

<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
