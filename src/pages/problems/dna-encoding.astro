
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Dna Encoding">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Dna Encoding</h2>
    <p>Solutions to dna-encoding in various languages.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#elixir">Elixir</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="elixir">Elixir</a></h3>
            <a href="/languages/elixir">Other Elixir solutions.</a>
            <pre><code class="language-elixir">{`defmodule DNA do
  def encode_nucleotide(code_point) do
    case code_point do
      ?\\s -> 0b0000
      ?A -> 0b0001
      ?C -> 0b0010
      ?G -> 0b0100
      ?T -> 0b1000
    end
  end

  def decode_nucleotide(encoded_code) do
    case encoded_code do
      0b0000 -> ?\\s
      0b0001 -> ?A
      0b0010 -> ?C
      0b0100 -> ?G
      0b1000 -> ?T
    end
  end

  def encode(dna), do: do_encode(dna, <<>>)

  defp do_encode([], acc), do: acc
  defp do_encode([nucleotide | tail], acc),
    do: do_encode(tail, <<acc::bitstring, encode_nucleotide(nucleotide)::4>>)

  def decode(dna), do: do_decode(dna, [])

  defp do_decode(<<>>, acc), do: acc
  defp do_decode(<<nucleotide::4, tail::bitstring>>, acc),
    do: do_decode(tail, acc ++ [decode_nucleotide(nucleotide)])
end
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>

<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
