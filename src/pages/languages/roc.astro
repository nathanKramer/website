
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Roc">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Roc</h2>
    <p>Problems solved in roc.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#accumulate">Accumulate</a></li><li><a href="#anagram">Anagram</a></li><li><a href="#armstrong-numbers">Armstrong Numbers</a></li><li><a href="#binary">Binary</a></li><li><a href="#binary-search">Binary Search</a></li><li><a href="#bob">Bob</a></li><li><a href="#clock">Clock</a></li><li><a href="#collatz-conjecture">Collatz Conjecture</a></li><li><a href="#complex-numbers">Complex Numbers</a></li><li><a href="#darts">Darts</a></li><li><a href="#difference-of-squares">Difference Of Squares</a></li><li><a href="#grains">Grains</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#hexadecimal">Hexadecimal</a></li><li><a href="#isogram">Isogram</a></li><li><a href="#kindergarten-garden">Kindergarten Garden</a></li><li><a href="#leap">Leap</a></li><li><a href="#micro-blog">Micro Blog</a></li><li><a href="#nucleotide-count">Nucleotide Count</a></li><li><a href="#octal">Octal</a></li><li><a href="#pangram">Pangram</a></li><li><a href="#proverb">Proverb</a></li><li><a href="#raindrops">Raindrops</a></li><li><a href="#resistor-color">Resistor Color</a></li><li><a href="#resistor-color-duo">Resistor Color Duo</a></li><li><a href="#reverse-string">Reverse String</a></li><li><a href="#rna-transcription">Rna Transcription</a></li><li><a href="#robot-simulator">Robot Simulator</a></li><li><a href="#roman-numerals">Roman Numerals</a></li><li><a href="#scrabble-score">Scrabble Score</a></li><li><a href="#secret-handshake">Secret Handshake</a></li><li><a href="#series">Series</a></li><li><a href="#space-age">Space Age</a></li><li><a href="#sublist">Sublist</a></li><li><a href="#sum-of-multiples">Sum Of Multiples</a></li><li><a href="#two-fer">Two Fer</a></li><li><a href="#word-count">Word Count</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="accumulate">Accumulate</a></h3>
            <a href="/problems/accumulate">Other "Accumulate" solutions.</a>
            <pre><code class="language-roc">{`module [accumulate]

accumulate : List a, (a -> b) -> List b
accumulate = \\list, func ->
    helper list func []

helper : List a, (a -> b), List b -> List b
helper = \\list, fn, acc ->
    when list is
        [] -> acc
        [x, .. as rest] ->
            newAcc = List.append acc (fn x)
            helper rest fn newAcc
`}</code></pre>
        

            <h3><a name="anagram">Anagram</a></h3>
            <a href="/problems/anagram">Other "Anagram" solutions.</a>
            <pre><code class="language-roc">{`module [findAnagrams]

import unicode.Grapheme

findAnagrams : Str, List Str -> List Str
findAnagrams = \\subject, candidates ->
    List.walk
        candidates
        []
        \\acc, candidate ->
            if isAnagram subject candidate then
                List.append acc candidate
            else
                acc

isAnagram = \\word, candidate ->
    wordLower = toLowerCase word
    candidateLower = toLowerCase candidate
    if wordLower == candidateLower then
        Bool.false
    else
        charOccurrences wordLower == charOccurrences candidateLower

charOccurrences = \\word ->
    graphemes = Grapheme.split word |> Result.withDefault []
    List.walk
        graphemes
        (Dict.empty {})
        (\\acc, grapheme ->
            value = Dict.get acc grapheme |> Result.withDefault 0
            Dict.insert acc grapheme (value + 1)
        )

toLowerCase = \\word ->
    word
    |> Str.toUtf8
    |> List.map toLower
    |> Str.fromUtf8
    |> Result.withDefault ""

toLower = \\byte ->
    if byte >= 'A' && byte <= 'Z' then byte + 32 else byte
`}</code></pre>
        

            <h3><a name="armstrong-numbers">Armstrong Numbers</a></h3>
            <a href="/problems/armstrong-numbers">Other "Armstrong Numbers" solutions.</a>
            <pre><code class="language-roc">{`module [isArmstrongNumber]

isArmstrongNumber : U64 -> Bool
isArmstrongNumber = \\number ->
    digits =
        getDigits number
    digitSum =
        List.walk
            digits
            0
            \\sum, digit ->
                pow =
                    Num.powInt digit (List.len digits)
                sum + pow

    digitSum == number

getDigits : U64 -> List U64
getDigits = \\number ->
    bytes =
        Num.toStr number
        |> Str.toUtf8
        |> List.map (\\byte -> byte - '0')
        |> List.map Num.toU64
    bytes

`}</code></pre>
        

            <h3><a name="binary">Binary</a></h3>
            <a href="/problems/binary">Other "Binary" solutions.</a>
            <pre><code class="language-roc">{`module [decimal]

b0 = 48
b1 = 49

decimal : Str -> Result U64 _
decimal = \\binaryStr ->
    isBinary = List.all (Str.toUtf8 binaryStr) (\\c -> c == b0 || c == b1)
    if isBinary then
        Ok (countBinary binaryStr)
    else
        Err "Must provide a binary string"

countBinary : Str -> U64
countBinary = \\binaryStr ->
    binaryStr
    |> Str.toUtf8
    |> List.reverse
    |> List.mapWithIndex
        (\\byte, i ->
            if byte == b1 then
                Num.powInt 2 i
            else
                0
        )
    |> List.sum
`}</code></pre>
        

            <h3><a name="binary-search">Binary Search</a></h3>
            <a href="/problems/binary-search">Other "Binary Search" solutions.</a>
            <pre><code class="language-roc">{`module [find]

find : List U64, U64 -> Result U64 _
find = \\array, target ->
    when array is
        [] -> Err NotPresent
        [only] -> if only == target then Ok 0 else Err NotPresent
        items ->
            pivot = List.len items // 2
            guess = List.get items pivot

            when guess is
                Ok x if x == target ->
                    Ok pivot

                Ok x if x > target ->
                    cutoff = List.len items - pivot
                    xs = List.dropLast items cutoff
                    find xs target

                Ok _ ->
                    xs = List.dropFirst items pivot
                    Result.map (find xs target) (\\i -> i + pivot)

                Err OutOfBounds -> crash "The pivot point $(Num.toStr pivot) should never be out of bounds for list of length $(Num.toStr (List.len array))."

`}</code></pre>
        

            <h3><a name="bob">Bob</a></h3>
            <a href="/problems/bob">Other "Bob" solutions.</a>
            <pre><code class="language-roc">{`module [response]

response : Str -> Str
response = \\heyBob ->
    sanitized = Str.trim heyBob
    isQuestion = Str.endsWith sanitized "?"
    isSilence = sanitized == ""
    isYelling = strIsYelling sanitized

    if isSilence then
        "Fine. Be that way!"
    else if isQuestion && isYelling then
        "Calm down, I know what I'm doing!"
    else if isQuestion then
        "Sure."
    else if isYelling then
        "Whoa, chill out!"
    else
        "Whatever."

strIsYelling = \\str ->
    alphas = List.keepIf (Str.toUtf8 str) isAlpha
    List.len alphas > 0 && List.all alphas isCapitalLetter

isAlpha : U8 -> Bool
isAlpha = \\byte ->
    (byte >= 'a' && byte <= 'z') || isCapitalLetter byte

isCapitalLetter : U8 -> Bool
isCapitalLetter = \\byte ->
    byte >= 'A' && byte <= 'Z'
`}</code></pre>
        

            <h3><a name="clock">Clock</a></h3>
            <a href="/problems/clock">Other "Clock" solutions.</a>
            <pre><code class="language-roc">{`module [create, toStr, add, subtract]

Clock : { hour : U8, minute : U8 }

create : { hours ? I64, minutes ? I64 }* -> Clock
create = \\{ hours ? 0, minutes ? 0 } ->
    totalMinutes = (hours * 60 + minutes) % (24 * 60)
    normalizedMinutes =
        if totalMinutes < 0 then
            totalMinutes + 24 * 60
        else
            totalMinutes
    {
        hour: Num.intCast ((normalizedMinutes // 60) % 24),
        minute: Num.intCast (normalizedMinutes % 60),
    }

toStr : Clock -> Str
toStr = \\{ hour, minute } ->
    hours = clockDigitToStr hour
    minutes = clockDigitToStr minute
    "$(hours):$(minutes)"

add : Clock, { hours ? I64, minutes ? I64 }* -> Clock
add = \\clock, { hours ? 0, minutes ? 0 } ->
    create {
        hours: Num.toI64 clock.hour + hours,
        minutes: Num.toI64 clock.minute + minutes,
    }

subtract : Clock, { hours ? I64, minutes ? I64 }* -> Clock
subtract = \\clock, { hours ? 0, minutes ? 0 } ->
    add clock { hours: -hours, minutes: -minutes }

### Private

clockDigitToStr : U8 -> Str
clockDigitToStr = \\digit ->
    if digit < 10 then
        "0$(Num.toStr digit)"
    else
        Num.toStr digit
`}</code></pre>
        

            <h3><a name="collatz-conjecture">Collatz Conjecture</a></h3>
            <a href="/problems/collatz-conjecture">Other "Collatz Conjecture" solutions.</a>
            <pre><code class="language-roc">{`module [steps]

steps : U64 -> Result U64 [InvalidInput]
steps = \\n ->
    if n < 1 then
        Err InvalidInput
    else
        Ok (collatzCount 0 n)

collatzCount : U64, U64 -> U64
collatzCount = \\stepCount, n ->
    val =
        if n % 2 == 0 then
            (n // 2)
        else
            (3 * n + 1)

    if n == 1 then
        stepCount
    else
        collatzCount (stepCount + 1) val
`}</code></pre>
        

            <h3><a name="complex-numbers">Complex Numbers</a></h3>
            <a href="/problems/complex-numbers">Other "Complex Numbers" solutions.</a>
            <pre><code class="language-roc">{`module [real, imaginary, add, sub, mul, div, conjugate, abs, exp]

Complex : { re : F64, im : F64 }

real : Complex -> F64
real = \\{ re } -> re

imaginary : Complex -> F64
imaginary = \\{ im } -> im

add : Complex, Complex -> Complex
add = \\{ re: a, im: b }, { re: c, im: d } -> { re: a + c, im: b + d }

sub : Complex, Complex -> Complex
sub = \\{ re: a, im: b }, { re: c, im: d } -> { re: a - c, im: b - d }

mul : Complex, Complex -> Complex
mul = \\{ re: a, im: b }, { re: c, im: d } -> { re: a * c - b * d, im: b * c + a * d }

div : Complex, Complex -> Complex
div = \\{ re: a, im: b }, { re: c, im: d } -> {
    re: (a * c + b * d) / (c ^ 2 + d ^ 2),
    im: (b * c - a * d) / (c ^ 2 + d ^ 2),
}

conjugate : Complex -> Complex
conjugate = \\{ re: a, im: b } -> { re: a, im: -b }

abs : Complex -> F64
abs = \\{ re: a, im: b } -> Num.sqrt (a * a + b * b)

exp : Complex -> Complex
exp = \\{ re: a, im: b } ->
    ea = Num.e |> Num.pow a
    { re: ea * Num.cos b, im: ea * Num.sin b }
`}</code></pre>
        

            <h3><a name="darts">Darts</a></h3>
            <a href="/problems/darts">Other "Darts" solutions.</a>
            <pre><code class="language-roc">{`module [score]

score : F64, F64 -> U64
score = \\x, y ->
    r = Num.sqrt (x ^ 2 + y ^ 2)

    when r is
        _ if r <= 1 -> 10
        _ if r <= 5 -> 5
        _ if r <= 10 -> 1
        _ -> 0

`}</code></pre>
        

            <h3><a name="difference-of-squares">Difference Of Squares</a></h3>
            <a href="/problems/difference-of-squares">Other "Difference Of Squares" solutions.</a>
            <pre><code class="language-roc">{`module [squareOfSum, sumOfSquares, differenceOfSquares]

# squareOfSum : U64 -> U64
# squareOfSum = \\number ->
#     loop =
#         \\sum ->
#             if sum == number then
#                 sum
#             else
#                 sum + loop (sum + 1)
#     summation = loop 1
#     Num.powInt summation 2

squareOfSum : U64 -> U64
squareOfSum = \\number ->
    List.sum (List.range { start: At 1, end: At number }) |> Num.powInt 2

sumOfSquares : U64 -> U64
sumOfSquares = \\number ->
    List.map
        (List.range { start: At 1, end: At number })
        \\n -> n * n
    |> List.sum

differenceOfSquares : U64 -> U64
differenceOfSquares = \\number ->
    squareOfSum number - sumOfSquares number
`}</code></pre>
        

            <h3><a name="grains">Grains</a></h3>
            <a href="/problems/grains">Other "Grains" solutions.</a>
            <pre><code class="language-roc">{`module [grainsOnSquare, totalGrains]

grainsOnSquare : U8 -> Result U64 _
grainsOnSquare = \\square ->
    if square > 0 && square <= 64 then
        Ok (Num.powInt 2 ((Num.toU64 square) - 1))
    else
        Err NotAChessSquare

totalGrains : U64
totalGrains = Num.maxU64
`}</code></pre>
        

            <h3><a name="hello-world">Hello World</a></h3>
            <a href="/problems/hello-world">Other "Hello World" solutions.</a>
            <pre><code class="language-roc">{`module [hello]

hello : Str
hello = "Hello, World!"
`}</code></pre>
        

            <h3><a name="hexadecimal">Hexadecimal</a></h3>
            <a href="/problems/hexadecimal">Other "Hexadecimal" solutions.</a>
            <pre><code class="language-roc">{`module [parse]

parse : Str -> Result U64 _
parse = \\string ->
    if string == "" then
        Err Empty
        else

    hexadecimals =
        string
        |> Str.toUtf8
        |> List.reverse
        |> List.mapTry hexByteToDecimal

    Result.try hexadecimals \\l ->
        List.walkWithIndex l (Ok 0) \\resultSum, digit, i ->
            when resultSum is
                Ok sum ->
                    if digit > 0 && i > 16 then
                        Err Overflow
                        else

                    safeMultiply = Num.mulChecked (Num.powInt 16 i) digit
                    newValue = Result.try safeMultiply \\x -> Num.addChecked sum x
                    newValue

                Err _ ->
                    resultSum
hexByteToDecimal = \\hex ->
    lower = if hex >= 'A' && hex <= 'Z' then hex + 32 else hex
    when lower is
        '0' -> Ok 0
        '1' -> Ok 1
        '2' -> Ok 2
        '3' -> Ok 3
        '4' -> Ok 4
        '5' -> Ok 5
        '6' -> Ok 6
        '7' -> Ok 7
        '8' -> Ok 8
        '9' -> Ok 9
        'a' -> Ok 10
        'b' -> Ok 11
        'c' -> Ok 12
        'd' -> Ok 13
        'e' -> Ok 14
        'f' -> Ok 15
        _ -> Err NotHex
`}</code></pre>
        

            <h3><a name="isogram">Isogram</a></h3>
            <a href="/problems/isogram">Other "Isogram" solutions.</a>
            <pre><code class="language-roc">{`module [isIsogram]

isIsogram : Str -> Bool
isIsogram = \\phrase ->
    sanitized =
        phrase
        |> Str.toUtf8
        |> List.map toLowerCase
        |> List.keepIf isAlpha
    List.len sanitized == Set.fromList sanitized |> Set.len

isAlpha = \\char ->
    lower = toLowerCase char
    lower >= 'a' && lower <= 'z'

toLowerCase = \\char ->
    when char is
        _ if char >= 'A' && char <= 'Z' -> char + 32
        _ -> char
`}</code></pre>
        

            <h3><a name="kindergarten-garden">Kindergarten Garden</a></h3>
            <a href="/problems/kindergarten-garden">Other "Kindergarten Garden" solutions.</a>
            <pre><code class="language-roc">{`module [plants]

Student : [Alice, Bob, Charlie, David, Eve, Fred, Ginny, Harriet, Ileana, Joseph, Kincaid, Larry]
Plant : [Grass, Clover, Radishes, Violets]

plants : Str, Student -> Result (List Plant) _
plants = \\diagram, student ->
    rows = Str.split diagram "\\n"
    (row1Result, row2Result) = (List.get rows 0, List.get rows 1)
    plantResult = Result.map2
        row1Result
        row2Result
        \\row1Str, row2Str ->
            idx = studentNumber student * plantsPerStudent

            row1 = Str.toUtf8 row1Str |> List.dropFirst idx
            row2 = Str.toUtf8 row2Str |> List.dropFirst idx

            plantsFromRow1 = List.takeFirst row1 plantsPerStudent
            plantsFromRow2 = List.takeFirst row2 plantsPerStudent

            List.concat plantsFromRow1 plantsFromRow2
    Result.map plantResult \\result -> List.keepOks result toPlant

toPlant = \\plantStr ->
    when plantStr is
        'V' -> Ok Violets
        'R' -> Ok Radishes
        'C' -> Ok Clover
        'G' -> Ok Grass
        _ -> Err UnsupportedPlant

plantsPerStudent = 2

studentNumber = \\student ->
    when student is
        Alice -> 0
        Bob -> 1
        Charlie -> 2
        David -> 3
        Eve -> 4
        Fred -> 5
        Ginny -> 6
        Harriet -> 7
        Ileana -> 8
        Joseph -> 9
        Kincaid -> 10
        Larry -> 11
`}</code></pre>
        

            <h3><a name="leap">Leap</a></h3>
            <a href="/problems/leap">Other "Leap" solutions.</a>
            <pre><code class="language-roc">{`module [isLeapYear]

isLeapYear : I64 -> Bool
isLeapYear = \\year ->
    year % 4 == 0 &&
    year % 100 != 0 || year % 400 == 0
`}</code></pre>
        

            <h3><a name="micro-blog">Micro Blog</a></h3>
            <a href="/problems/micro-blog">Other "Micro Blog" solutions.</a>
            <pre><code class="language-roc">{`module [truncate]

import unicode.CodePoint

truncate : Str -> Result Str _
truncate = \\input ->
    codepoints =
        input
            |> Str.toUtf8
            |> CodePoint.parseUtf8?
    codepoints |> List.takeFirst 5 |> CodePoint.toStr? |> Ok

`}</code></pre>
        

            <h3><a name="nucleotide-count">Nucleotide Count</a></h3>
            <a href="/problems/nucleotide-count">Other "Nucleotide Count" solutions.</a>
            <pre><code class="language-roc">{`module [nucleotideCounts]

nucleotideCounts : Str -> Result { a : U64, c : U64, g : U64, t : U64 } _
nucleotideCounts = \\input ->
    counts = { a: 0, c: 0, g: 0, t: 0 }
    Str.walkUtf8
        input
        (Ok counts)
        \\acc, char ->
            when char is
                'A' -> Result.map acc (\\sums -> { sums & a: sums.a + 1 })
                'C' -> Result.map acc (\\sums -> { sums & c: sums.c + 1 })
                'G' -> Result.map acc (\\sums -> { sums & g: sums.g + 1 })
                'T' -> Result.map acc (\\sums -> { sums & t: sums.t + 1 })
                _ -> Err InvalidNucleotide

`}</code></pre>
        

            <h3><a name="octal">Octal</a></h3>
            <a href="/problems/octal">Other "Octal" solutions.</a>
            <pre><code class="language-roc">{`module [parse]

parse : Str -> Result U64 _
parse = \\string ->
    if string == "" then
        Err Empty
        else

    octals =
        string
        |> Str.toUtf8
        |> List.reverse
        |> List.mapTry octalToDecimal

    Result.try octals \\l ->
        List.walkWithIndex l (Ok 0) \\resultSum, digit, i ->
            when resultSum is
                Ok sum ->
                    safeMultiply = Num.mulChecked (Num.powInt 8 i) digit
                    newValue = Result.try safeMultiply \\x -> Num.addChecked sum x
                    newValue

                Err _ ->
                    resultSum

octalToDecimal = \\octal ->
    lower = if octal >= 'A' && octal <= 'Z' then octal + 32 else octal
    when lower is
        '0' -> Ok 0
        '1' -> Ok 1
        '2' -> Ok 2
        '3' -> Ok 3
        '4' -> Ok 4
        '5' -> Ok 5
        '6' -> Ok 6
        '7' -> Ok 7
        _ -> Err NotHex
`}</code></pre>
        

            <h3><a name="pangram">Pangram</a></h3>
            <a href="/problems/pangram">Other "Pangram" solutions.</a>
            <pre><code class="language-roc">{`module [isPangram]

isPangram : Str -> Bool
isPangram = \\sentence ->
    chars =
        sentence
        |> Str.toUtf8
        |> List.map toLowerCase
        |> Set.fromList
    List.all alphas \\char -> Set.contains chars char

alphas : List U8
alphas = List.range { start: At 'a', end: At 'z' }

toLowerCase : U8 -> U8
toLowerCase = \\char -> if char >= 'A' && char <= 'Z' then char + 32 else char
`}</code></pre>
        

            <h3><a name="proverb">Proverb</a></h3>
            <a href="/problems/proverb">Other "Proverb" solutions.</a>
            <pre><code class="language-roc">{`module [recite]

recite : List Str -> Str
recite = \\strings ->
    loop = \\idx, acc ->
        catalyst = Result.withDefault (List.first strings) ""
        words = List.sublist strings { start: idx, len: 2 }

        newLine =
            when words is
                [a, b] -> "For want of a $(a) the $(b) was lost."
                [_] -> "And all for the want of a $(catalyst)."
                _ -> ""

        proverb = List.append acc newLine

        if idx + 1 < List.len strings then
            loop (idx + 1) proverb
        else
            proverb

    Str.joinWith (loop 0 []) "\\n"
`}</code></pre>
        

            <h3><a name="raindrops">Raindrops</a></h3>
            <a href="/problems/raindrops">Other "Raindrops" solutions.</a>
            <pre><code class="language-roc">{`module [convert]

convert : U64 -> Str
convert = \\number ->
    pling = if number % 3 == 0 then "Pling" else ""
    plang = if number % 5 == 0 then "Plang" else ""
    plong = if number % 7 == 0 then "Plong" else ""
    result = Str.joinWith [pling, plang, plong] ""

    if result == "" then
        Num.toStr number
    else
        result
`}</code></pre>
        

            <h3><a name="resistor-color">Resistor Color</a></h3>
            <a href="/problems/resistor-color">Other "Resistor Color" solutions.</a>
            <pre><code class="language-roc">{`module [colorCode, colors]

colorMap =
    Dict.fromList [
        ("black", 0),
        ("brown", 1),
        ("red", 2),
        ("orange", 3),
        ("yellow", 4),
        ("green", 5),
        ("blue", 6),
        ("violet", 7),
        ("grey", 8),
        ("white", 9),
    ]

colorCode : Str -> Result U64 _
colorCode = \\color ->
    Dict.get colorMap color

colors : List Str
colors = Dict.keys colorMap
`}</code></pre>
        

            <h3><a name="resistor-color-duo">Resistor Color Duo</a></h3>
            <a href="/problems/resistor-color-duo">Other "Resistor Color Duo" solutions.</a>
            <pre><code class="language-roc">{`module [value]

Color : [
    Black,
    Brown,
    Red,
    Orange,
    Yellow,
    Green,
    Blue,
    Violet,
    Grey,
    White,
]

value : Color, Color -> U8
value = \\first, second ->
    firstDigit = colors first * 10
    secondDigit = colors second
    firstDigit + secondDigit

colors = \\color ->
    when color is
        Black -> 0
        Brown -> 1
        Red -> 2
        Orange -> 3
        Yellow -> 4
        Green -> 5
        Blue -> 6
        Violet -> 7
        Grey -> 8
        White -> 9
`}</code></pre>
        

            <h3><a name="reverse-string">Reverse String</a></h3>
            <a href="/problems/reverse-string">Other "Reverse String" solutions.</a>
            <pre><code class="language-roc">{`module [reverse]

import unicode.Grapheme

reverse : Str -> Str
reverse = \\string ->
    when Grapheme.split string is
        Ok chars ->
            chars |> List.reverse |> Str.joinWith ""

        Err _ -> ""
`}</code></pre>
        

            <h3><a name="rna-transcription">Rna Transcription</a></h3>
            <a href="/problems/rna-transcription">Other "Rna Transcription" solutions.</a>
            <pre><code class="language-roc">{`module [toRna]

toRna : Str -> Str
toRna = \\dna ->
    dna
    |> Str.toUtf8
    |> List.map nucleoTideComplement
    |> Str.fromUtf8
    |> Result.withDefault ""

nucleoTideComplement = \\n ->
    when n is
        'G' -> 'C'
        'C' -> 'G'
        'T' -> 'A'
        'A' -> 'U'
        _ -> n
`}</code></pre>
        

            <h3><a name="robot-simulator">Robot Simulator</a></h3>
            <a href="/problems/robot-simulator">Other "Robot Simulator" solutions.</a>
            <pre><code class="language-roc">{`module [create, move]

Direction : [North, East, South, West]
Robot : { x : I64, y : I64, direction : Direction }

create : { x ? I64, y ? I64, direction ? Direction } -> Robot
create = \\{ x ? 0, y ? 0, direction ? North } -> {
    x,
    y,
    direction,
}

move : Robot, Str -> Robot
move = \\robot, instructions ->
    instructionBytes = Str.toUtf8 instructions
    List.walk instructionBytes robot applyInstruction

applyInstruction : Robot, U8 -> Robot
applyInstruction = \\{ x, y, direction }, instruction ->
    when instruction is
        'L' ->
            newDirection =
                when direction is
                    North -> West
                    South -> East
                    East -> North
                    West -> South
            { x, y, direction: newDirection }

        'R' ->
            newDirection =
                when direction is
                    North -> East
                    East -> South
                    South -> West
                    West -> North
            { x, y, direction: newDirection }

        'A' ->
            when direction is
                North -> { x, y: y + 1, direction }
                East -> { x: x + 1, y, direction }
                South -> { x, y: y - 1, direction }
                West -> { x: x - 1, y, direction }

        _ -> { x, y, direction }

`}</code></pre>
        

            <h3><a name="roman-numerals">Roman Numerals</a></h3>
            <a href="/problems/roman-numerals">Other "Roman Numerals" solutions.</a>
            <pre><code class="language-roc">{`module [roman]

numerals = Dict.fromList [
    (1000, "M"),
    (900, "CM"),
    (500, "D"),
    (400, "CD"),
    (100, "C"),
    (90, "XC"),
    (50, "L"),
    (40, "XL"),
    (10, "X"),
    (9, "IX"),
    (5, "V"),
    (4, "IV"),
    (1, "I"),
]

roman : U64 -> Result Str _
roman = \\number ->
    nums =
        numerals
        |> Dict.keys
        |> List.sortDesc

    (resultString, _) = List.walk nums ("", number) \\(result, n), denominator ->
        if (n // denominator) >= 1 then
            romanChar = numerals |> Dict.get denominator |> Result.withDefault ""
            newChars = Str.repeat romanChar (n // denominator)
            (Str.concat result newChars, Num.rem n denominator)
        else
            (result, n)

    Ok resultString

`}</code></pre>
        

            <h3><a name="scrabble-score">Scrabble Score</a></h3>
            <a href="/problems/scrabble-score">Other "Scrabble Score" solutions.</a>
            <pre><code class="language-roc">{`module [score]

score : Str -> U64
score = \\word ->
    word
    |> Str.toUtf8
    |> List.map \\char -> if char >= 'A' && char <= 'Z' then char + 32 else char
    |> List.keepOks \\char -> Dict.get points char
    |> List.sum

points =
    Dict.fromList [
        ('a', 1),
        ('e', 1),
        ('i', 1),
        ('o', 1),
        ('u', 1),
        ('l', 1),
        ('n', 1),
        ('r', 1),
        ('s', 1),
        ('t', 1),
        ('d', 2),
        ('g', 2),
        ('b', 3),
        ('c', 3),
        ('m', 3),
        ('p', 3),
        ('f', 4),
        ('h', 4),
        ('v', 4),
        ('w', 4),
        ('y', 4),
        ('k', 5),
        ('j', 8),
        ('x', 8),
        ('q', 10),
        ('z', 10),
    ]
`}</code></pre>
        

            <h3><a name="secret-handshake">Secret Handshake</a></h3>
            <a href="/problems/secret-handshake">Other "Secret Handshake" solutions.</a>
            <pre><code class="language-roc">{`module [commands]

actions = [
    (1, "wink"),
    (2, "double blink"),
    (4, "close your eyes"),
    (8, "jump"),
]

commands : U64 -> List Str
commands = \\number ->
    commandList = List.walk actions [] \\acc, (mask, action) ->
        if Num.bitwiseAnd number mask == mask then
            List.append acc action
        else
            acc
    if Num.bitwiseAnd number 16 == 16 then
        List.reverse commandList
    else
        commandList
`}</code></pre>
        

            <h3><a name="series">Series</a></h3>
            <a href="/problems/series">Other "Series" solutions.</a>
            <pre><code class="language-roc">{`module [slices]

slices : Str, U64 -> List Str
slices = \\string, sliceLength ->
    utf8 = Str.toUtf8 string

    walk = \\acc, _, idx ->
        bytes = List.sublist utf8 { start: idx, len: sliceLength }
        substr = Str.fromUtf8 bytes

        if (List.len bytes) == sliceLength then
            when substr is
                Ok s -> List.append acc s
                Err _ -> acc
        else
            acc

    if sliceLength > 0 then
        Str.walkUtf8WithIndex string [] walk
    else
        []

`}</code></pre>
        

            <h3><a name="space-age">Space Age</a></h3>
            <a href="/problems/space-age">Other "Space Age" solutions.</a>
            <pre><code class="language-roc">{`module [age]

Planet : [
    Mercury,
    Venus,
    Earth,
    Mars,
    Jupiter,
    Saturn,
    Uranus,
    Neptune,
]

earthYearSeconds = 31_557_600

age : Planet, Dec -> Dec
age = \\planet, seconds ->
    earthYears = seconds / earthYearSeconds
    earthYears / orbitalPeriod planet

orbitalPeriod = \\planet ->
    when planet is
        Mercury -> 0.2408467
        Venus -> 0.61519726
        Earth -> 1.0
        Mars -> 1.8808158
        Jupiter -> 11.862615
        Saturn -> 29.447498
        Uranus -> 84.016846
        Neptune -> 164.79132

`}</code></pre>
        

            <h3><a name="sublist">Sublist</a></h3>
            <a href="/problems/sublist">Other "Sublist" solutions.</a>
            <pre><code class="language-roc">{`module [sublist]

sublist : List U8, List U8 -> [Equal, Sublist, Superlist, Unequal]
sublist = \\list1, list2 ->
    if list1 == list2 then
        Equal
    else if isSublist list1 list2 then
        Superlist
    else if isSublist list2 list1 then
        Sublist
    else
        Unequal

isSublist = \\list1, list2 ->
    List.walkWithIndex
        list1
        Bool.false
        \\sublistFound, _, idx ->
            if sublistFound then
                sublistFound
                else

            attemptedSublist = List.sublist list1 { start: idx, len: List.len list2 }

            attemptedSublist == list2

`}</code></pre>
        

            <h3><a name="sum-of-multiples">Sum Of Multiples</a></h3>
            <a href="/problems/sum-of-multiples">Other "Sum Of Multiples" solutions.</a>
            <pre><code class="language-roc">{`module [sumOfMultiples]

sumOfMultiples : List U64, U64 -> U64
sumOfMultiples = \\factors, limit ->
    allMultiples = List.joinMap factors (\\factor -> multiplesLessThan factor limit)
    allMultiples |> Set.fromList |> Set.toList |> List.sum

multiplesLessThan = \\factor, limit ->
    if factor == 0 then
        [0]
        else

    List.range { start: At factor, end: Before limit, step: factor }
`}</code></pre>
        

            <h3><a name="two-fer">Two Fer</a></h3>
            <a href="/problems/two-fer">Other "Two Fer" solutions.</a>
            <pre><code class="language-roc">{`module [twoFer]

twoFer : [Name Str, Anonymous] -> Str
twoFer = \\name ->
    word =
        when name is
            Anonymous -> "you"
            Name n -> n
    "One for $(word), one for me."
`}</code></pre>
        

            <h3><a name="word-count">Word Count</a></h3>
            <a href="/problems/word-count">Other "Word Count" solutions.</a>
            <pre><code class="language-roc">{`module [countWords]

countWords : Str -> Dict Str U64
countWords = \\sentence ->
    sentence
    |> Str.replaceEach "," " "
    |> Str.split " "
    |> List.map sanitizeWord
    |> List.dropIf Str.isEmpty
    |> List.walk (Dict.empty {}) \\dict, word ->
        Dict.update dict word \\result ->
            when result is
                Ok existing -> Ok (existing + 1)
                Err Missing -> Ok 1

sanitizeWord : Str -> Str
sanitizeWord = \\word ->
    word
    |> Str.trim
    |> Str.dropPrefix "'"
    |> Str.dropSuffix "'"
    |> Str.toUtf8
    |> List.map \\char -> if char >= 'A' && char <= 'Z' then char + 32 else char
    |> List.keepIf \\char -> (char >= 'a' && char <= 'z') || (char >= '0' && char <= '9') || char == '\\''
    |> Str.fromUtf8
    |> Result.withDefault ""
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>
    <script>
        Prism.languages['roc'] = Prism.languages['elm']
    </script>
<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
