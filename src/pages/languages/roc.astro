
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Roc">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Roc</h2>
    <p>Problems solved in roc.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#accumulate">Accumulate</a></li><li><a href="#binary">Binary</a></li><li><a href="#clock">Clock</a></li><li><a href="#collatz-conjecture">Collatz Conjecture</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#leap">Leap</a></li><li><a href="#raindrops">Raindrops</a></li><li><a href="#resistor-color">Resistor Color</a></li><li><a href="#two-fer">Two Fer</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="accumulate">Accumulate</a></h3>
            <a href="/problems/accumulate">Other "Accumulate" solutions.</a>
            <pre><code class="language-roc">{`module [accumulate]

accumulate : List a, (a -> b) -> List b
accumulate = \\list, func ->
    helper list func []

helper : List a, (a -> b), List b -> List b
helper = \\list, fn, acc ->
    when list is
        [] -> acc
        [x, .. as rest] ->
            newAcc = List.append acc (fn x)
            helper rest fn newAcc
`}</code></pre>
        

            <h3><a name="binary">Binary</a></h3>
            <a href="/problems/binary">Other "Binary" solutions.</a>
            <pre><code class="language-roc">{`module [decimal]

b0 = 48
b1 = 49

decimal : Str -> Result U64 _
decimal = \\binaryStr ->
    isBinary = List.all (Str.toUtf8 binaryStr) (\\c -> c == b0 || c == b1)
    if isBinary then
        Ok (countBinary binaryStr)
    else
        Err "Must provide a binary string"

countBinary : Str -> U64
countBinary = \\binaryStr ->
    binaryStr
    |> Str.toUtf8
    |> List.reverse
    |> List.mapWithIndex
        (\\byte, i ->
            if byte == b1 then
                Num.powInt 2 i
            else
                0
        )
    |> List.sum
`}</code></pre>
        

            <h3><a name="clock">Clock</a></h3>
            <a href="/problems/clock">Other "Clock" solutions.</a>
            <pre><code class="language-roc">{`module [create, toStr, add, subtract]

Clock : { hour : U8, minute : U8 }

create : { hours ? I64, minutes ? I64 }* -> Clock
create = \\{ hours ? 0, minutes ? 0 } ->
    totalMinutes = (hours * 60 + minutes) % (24 * 60)
    normalizedMinutes =
        if totalMinutes < 0 then
            totalMinutes + 24 * 60
        else
            totalMinutes
    {
        hour: Num.intCast ((normalizedMinutes // 60) % 24),
        minute: Num.intCast (normalizedMinutes % 60),
    }

toStr : Clock -> Str
toStr = \\{ hour, minute } ->
    hours = clockDigitToStr hour
    minutes = clockDigitToStr minute
    "$(hours):$(minutes)"

add : Clock, { hours ? I64, minutes ? I64 }* -> Clock
add = \\clock, { hours ? 0, minutes ? 0 } ->
    create {
        hours: Num.toI64 clock.hour + hours,
        minutes: Num.toI64 clock.minute + minutes,
    }

subtract : Clock, { hours ? I64, minutes ? I64 }* -> Clock
subtract = \\clock, { hours ? 0, minutes ? 0 } ->
    add clock { hours: -hours, minutes: -minutes }

### Private

clockDigitToStr : U8 -> Str
clockDigitToStr = \\digit ->
    if digit < 10 then
        "0$(Num.toStr digit)"
    else
        Num.toStr digit
`}</code></pre>
        

            <h3><a name="collatz-conjecture">Collatz Conjecture</a></h3>
            <a href="/problems/collatz-conjecture">Other "Collatz Conjecture" solutions.</a>
            <pre><code class="language-roc">{`module [steps]

steps : U64 -> Result U64 [InvalidInput]
steps = \\n ->
    if n < 1 then
        Err InvalidInput
    else
        Ok (collatzCount 0 n)

collatzCount : U64, U64 -> U64
collatzCount = \\stepCount, n ->
    val =
        if n % 2 == 0 then
            (n // 2)
        else
            (3 * n + 1)

    if n == 1 then
        stepCount
    else
        collatzCount (stepCount + 1) val
`}</code></pre>
        

            <h3><a name="hello-world">Hello World</a></h3>
            <a href="/problems/hello-world">Other "Hello World" solutions.</a>
            <pre><code class="language-roc">{`module [hello]

hello : Str
hello = "Hello, World!"
`}</code></pre>
        

            <h3><a name="leap">Leap</a></h3>
            <a href="/problems/leap">Other "Leap" solutions.</a>
            <pre><code class="language-roc">{`module [isLeapYear]

isLeapYear : I64 -> Bool
isLeapYear = \\year ->
    year % 4 == 0 &&
    year % 100 != 0 || year % 400 == 0
`}</code></pre>
        

            <h3><a name="raindrops">Raindrops</a></h3>
            <a href="/problems/raindrops">Other "Raindrops" solutions.</a>
            <pre><code class="language-roc">{`module [convert]

convert : U64 -> Str
convert = \\number ->
    pling = if number % 3 == 0 then "Pling" else ""
    plang = if number % 5 == 0 then "Plang" else ""
    plong = if number % 7 == 0 then "Plong" else ""
    result = Str.joinWith [pling, plang, plong] ""

    if result == "" then
        Num.toStr number
    else
        result
`}</code></pre>
        

            <h3><a name="resistor-color">Resistor Color</a></h3>
            <a href="/problems/resistor-color">Other "Resistor Color" solutions.</a>
            <pre><code class="language-roc">{`module [colorCode, colors]

colorMap =
    Dict.fromList [
        ("black", 0),
        ("brown", 1),
        ("red", 2),
        ("orange", 3),
        ("yellow", 4),
        ("green", 5),
        ("blue", 6),
        ("violet", 7),
        ("grey", 8),
        ("white", 9),
    ]

colorCode : Str -> Result U64 _
colorCode = \\color ->
    Dict.get colorMap color

colors : List Str
colors = Dict.keys colorMap
`}</code></pre>
        

            <h3><a name="two-fer">Two Fer</a></h3>
            <a href="/problems/two-fer">Other "Two Fer" solutions.</a>
            <pre><code class="language-roc">{`module [twoFer]

twoFer : [Name Str, Anonymous] -> Str
twoFer = \\name ->
    word =
        when name is
            Anonymous -> "you"
            Name n -> n
    "One for $(word), one for me."
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>
    <script>
        Prism.languages['roc'] = Prism.languages['elm']
    </script>
<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
