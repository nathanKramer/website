
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Roc">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Roc</h2>
    <p>Problems solved in roc.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#accumulate">Accumulate</a></li><li><a href="#armstrong-numbers">Armstrong Numbers</a></li><li><a href="#binary">Binary</a></li><li><a href="#binary-search">Binary Search</a></li><li><a href="#clock">Clock</a></li><li><a href="#collatz-conjecture">Collatz Conjecture</a></li><li><a href="#darts">Darts</a></li><li><a href="#difference-of-squares">Difference Of Squares</a></li><li><a href="#grains">Grains</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#isogram">Isogram</a></li><li><a href="#leap">Leap</a></li><li><a href="#micro-blog">Micro Blog</a></li><li><a href="#nucleotide-count">Nucleotide Count</a></li><li><a href="#raindrops">Raindrops</a></li><li><a href="#resistor-color">Resistor Color</a></li><li><a href="#rna-transcription">Rna Transcription</a></li><li><a href="#series">Series</a></li><li><a href="#space-age">Space Age</a></li><li><a href="#sublist">Sublist</a></li><li><a href="#two-fer">Two Fer</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="accumulate">Accumulate</a></h3>
            <a href="/problems/accumulate">Other "Accumulate" solutions.</a>
            <pre><code class="language-roc">{`module [accumulate]

accumulate : List a, (a -> b) -> List b
accumulate = \\list, func ->
    helper list func []

helper : List a, (a -> b), List b -> List b
helper = \\list, fn, acc ->
    when list is
        [] -> acc
        [x, .. as rest] ->
            newAcc = List.append acc (fn x)
            helper rest fn newAcc
`}</code></pre>
        

            <h3><a name="armstrong-numbers">Armstrong Numbers</a></h3>
            <a href="/problems/armstrong-numbers">Other "Armstrong Numbers" solutions.</a>
            <pre><code class="language-roc">{`module [isArmstrongNumber]

isArmstrongNumber : U64 -> Bool
isArmstrongNumber = \\number ->
    digits =
        getDigits number
    digitSum =
        List.walk
            digits
            0
            \\sum, digit ->
                pow =
                    Num.powInt digit (List.len digits)
                sum + pow

    digitSum == number

getDigits : U64 -> List U64
getDigits = \\number ->
    bytes =
        Num.toStr number
        |> Str.toUtf8
        |> List.map (\\byte -> byte - '0')
        |> List.map Num.toU64
    bytes

`}</code></pre>
        

            <h3><a name="binary">Binary</a></h3>
            <a href="/problems/binary">Other "Binary" solutions.</a>
            <pre><code class="language-roc">{`module [decimal]

b0 = 48
b1 = 49

decimal : Str -> Result U64 _
decimal = \\binaryStr ->
    isBinary = List.all (Str.toUtf8 binaryStr) (\\c -> c == b0 || c == b1)
    if isBinary then
        Ok (countBinary binaryStr)
    else
        Err "Must provide a binary string"

countBinary : Str -> U64
countBinary = \\binaryStr ->
    binaryStr
    |> Str.toUtf8
    |> List.reverse
    |> List.mapWithIndex
        (\\byte, i ->
            if byte == b1 then
                Num.powInt 2 i
            else
                0
        )
    |> List.sum
`}</code></pre>
        

            <h3><a name="binary-search">Binary Search</a></h3>
            <a href="/problems/binary-search">Other "Binary Search" solutions.</a>
            <pre><code class="language-roc">{`module [find]

find : List U64, U64 -> Result U64 _
find = \\array, target ->
    when array is
        [] -> Err NotPresent
        [only] -> if only == target then Ok 0 else Err NotPresent
        items ->
            pivot = List.len items // 2
            guess = List.get items pivot

            when guess is
                Ok x if x == target ->
                    Ok pivot

                Ok x if x > target ->
                    cutoff = List.len items - pivot
                    xs = List.dropLast items cutoff
                    find xs target

                Ok _ ->
                    xs = List.dropFirst items pivot
                    Result.map (find xs target) (\\i -> i + pivot)

                Err OutOfBounds -> crash "The pivot point $(Num.toStr pivot) should never be out of bounds for list of length $(Num.toStr (List.len array))."

`}</code></pre>
        

            <h3><a name="clock">Clock</a></h3>
            <a href="/problems/clock">Other "Clock" solutions.</a>
            <pre><code class="language-roc">{`module [create, toStr, add, subtract]

Clock : { hour : U8, minute : U8 }

create : { hours ? I64, minutes ? I64 }* -> Clock
create = \\{ hours ? 0, minutes ? 0 } ->
    totalMinutes = (hours * 60 + minutes) % (24 * 60)
    normalizedMinutes =
        if totalMinutes < 0 then
            totalMinutes + 24 * 60
        else
            totalMinutes
    {
        hour: Num.intCast ((normalizedMinutes // 60) % 24),
        minute: Num.intCast (normalizedMinutes % 60),
    }

toStr : Clock -> Str
toStr = \\{ hour, minute } ->
    hours = clockDigitToStr hour
    minutes = clockDigitToStr minute
    "$(hours):$(minutes)"

add : Clock, { hours ? I64, minutes ? I64 }* -> Clock
add = \\clock, { hours ? 0, minutes ? 0 } ->
    create {
        hours: Num.toI64 clock.hour + hours,
        minutes: Num.toI64 clock.minute + minutes,
    }

subtract : Clock, { hours ? I64, minutes ? I64 }* -> Clock
subtract = \\clock, { hours ? 0, minutes ? 0 } ->
    add clock { hours: -hours, minutes: -minutes }

### Private

clockDigitToStr : U8 -> Str
clockDigitToStr = \\digit ->
    if digit < 10 then
        "0$(Num.toStr digit)"
    else
        Num.toStr digit
`}</code></pre>
        

            <h3><a name="collatz-conjecture">Collatz Conjecture</a></h3>
            <a href="/problems/collatz-conjecture">Other "Collatz Conjecture" solutions.</a>
            <pre><code class="language-roc">{`module [steps]

steps : U64 -> Result U64 [InvalidInput]
steps = \\n ->
    if n < 1 then
        Err InvalidInput
    else
        Ok (collatzCount 0 n)

collatzCount : U64, U64 -> U64
collatzCount = \\stepCount, n ->
    val =
        if n % 2 == 0 then
            (n // 2)
        else
            (3 * n + 1)

    if n == 1 then
        stepCount
    else
        collatzCount (stepCount + 1) val
`}</code></pre>
        

            <h3><a name="darts">Darts</a></h3>
            <a href="/problems/darts">Other "Darts" solutions.</a>
            <pre><code class="language-roc">{`module [score]

score : F64, F64 -> U64
score = \\x, y ->
    r = Num.sqrt (x ^ 2 + y ^ 2)

    when r is
        _ if r <= 1 -> 10
        _ if r <= 5 -> 5
        _ if r <= 10 -> 1
        _ -> 0

`}</code></pre>
        

            <h3><a name="difference-of-squares">Difference Of Squares</a></h3>
            <a href="/problems/difference-of-squares">Other "Difference Of Squares" solutions.</a>
            <pre><code class="language-roc">{`module [squareOfSum, sumOfSquares, differenceOfSquares]

# squareOfSum : U64 -> U64
# squareOfSum = \\number ->
#     loop =
#         \\sum ->
#             if sum == number then
#                 sum
#             else
#                 sum + loop (sum + 1)
#     summation = loop 1
#     Num.powInt summation 2

squareOfSum : U64 -> U64
squareOfSum = \\number ->
    List.sum (List.range { start: At 1, end: At number }) |> Num.powInt 2

sumOfSquares : U64 -> U64
sumOfSquares = \\number ->
    List.map
        (List.range { start: At 1, end: At number })
        \\n -> n * n
    |> List.sum

differenceOfSquares : U64 -> U64
differenceOfSquares = \\number ->
    squareOfSum number - sumOfSquares number
`}</code></pre>
        

            <h3><a name="grains">Grains</a></h3>
            <a href="/problems/grains">Other "Grains" solutions.</a>
            <pre><code class="language-roc">{`module [grainsOnSquare, totalGrains]

grainsOnSquare : U8 -> Result U64 _
grainsOnSquare = \\square ->
    if square > 0 && square <= 64 then
        Ok (Num.powInt 2 ((Num.toU64 square) - 1))
    else
        Err NotAChessSquare

totalGrains : U64
totalGrains = Num.maxU64
`}</code></pre>
        

            <h3><a name="hello-world">Hello World</a></h3>
            <a href="/problems/hello-world">Other "Hello World" solutions.</a>
            <pre><code class="language-roc">{`module [hello]

hello : Str
hello = "Hello, World!"
`}</code></pre>
        

            <h3><a name="isogram">Isogram</a></h3>
            <a href="/problems/isogram">Other "Isogram" solutions.</a>
            <pre><code class="language-roc">{`module [isIsogram]

isIsogram : Str -> Bool
isIsogram = \\phrase ->
    sanitized =
        phrase
        |> Str.toUtf8
        |> List.map toLowerCase
        |> List.keepIf isAlpha
    List.len sanitized == Set.fromList sanitized |> Set.len

isAlpha = \\char ->
    lower = toLowerCase char
    lower >= 'a' && lower <= 'z'

toLowerCase = \\char ->
    when char is
        _ if char >= 'A' && char <= 'Z' -> char + 32
        _ -> char
`}</code></pre>
        

            <h3><a name="leap">Leap</a></h3>
            <a href="/problems/leap">Other "Leap" solutions.</a>
            <pre><code class="language-roc">{`module [isLeapYear]

isLeapYear : I64 -> Bool
isLeapYear = \\year ->
    year % 4 == 0 &&
    year % 100 != 0 || year % 400 == 0
`}</code></pre>
        

            <h3><a name="micro-blog">Micro Blog</a></h3>
            <a href="/problems/micro-blog">Other "Micro Blog" solutions.</a>
            <pre><code class="language-roc">{`module [truncate]

import unicode.CodePoint

truncate : Str -> Result Str _
truncate = \\input ->
    codepoints =
        input
            |> Str.toUtf8
            |> CodePoint.parseUtf8?
    codepoints |> List.takeFirst 5 |> CodePoint.toStr? |> Ok

`}</code></pre>
        

            <h3><a name="nucleotide-count">Nucleotide Count</a></h3>
            <a href="/problems/nucleotide-count">Other "Nucleotide Count" solutions.</a>
            <pre><code class="language-roc">{`module [nucleotideCounts]

nucleotideCounts : Str -> Result { a : U64, c : U64, g : U64, t : U64 } _
nucleotideCounts = \\input ->
    counts = { a: 0, c: 0, g: 0, t: 0 }
    Str.walkUtf8
        input
        (Ok counts)
        \\acc, char ->
            when char is
                'A' -> Result.map acc (\\sums -> { sums & a: sums.a + 1 })
                'C' -> Result.map acc (\\sums -> { sums & c: sums.c + 1 })
                'G' -> Result.map acc (\\sums -> { sums & g: sums.g + 1 })
                'T' -> Result.map acc (\\sums -> { sums & t: sums.t + 1 })
                _ -> Err InvalidNucleotide

`}</code></pre>
        

            <h3><a name="raindrops">Raindrops</a></h3>
            <a href="/problems/raindrops">Other "Raindrops" solutions.</a>
            <pre><code class="language-roc">{`module [convert]

convert : U64 -> Str
convert = \\number ->
    pling = if number % 3 == 0 then "Pling" else ""
    plang = if number % 5 == 0 then "Plang" else ""
    plong = if number % 7 == 0 then "Plong" else ""
    result = Str.joinWith [pling, plang, plong] ""

    if result == "" then
        Num.toStr number
    else
        result
`}</code></pre>
        

            <h3><a name="resistor-color">Resistor Color</a></h3>
            <a href="/problems/resistor-color">Other "Resistor Color" solutions.</a>
            <pre><code class="language-roc">{`module [colorCode, colors]

colorMap =
    Dict.fromList [
        ("black", 0),
        ("brown", 1),
        ("red", 2),
        ("orange", 3),
        ("yellow", 4),
        ("green", 5),
        ("blue", 6),
        ("violet", 7),
        ("grey", 8),
        ("white", 9),
    ]

colorCode : Str -> Result U64 _
colorCode = \\color ->
    Dict.get colorMap color

colors : List Str
colors = Dict.keys colorMap
`}</code></pre>
        

            <h3><a name="rna-transcription">Rna Transcription</a></h3>
            <a href="/problems/rna-transcription">Other "Rna Transcription" solutions.</a>
            <pre><code class="language-roc">{`module [toRna]

toRna : Str -> Str
toRna = \\dna ->
    dna
    |> Str.toUtf8
    |> List.map nucleoTideComplement
    |> Str.fromUtf8
    |> Result.withDefault ""

nucleoTideComplement = \\n ->
    when n is
        'G' -> 'C'
        'C' -> 'G'
        'T' -> 'A'
        'A' -> 'U'
        _ -> n
`}</code></pre>
        

            <h3><a name="series">Series</a></h3>
            <a href="/problems/series">Other "Series" solutions.</a>
            <pre><code class="language-roc">{`module [slices]

slices : Str, U64 -> List Str
slices = \\string, sliceLength ->
    utf8 = Str.toUtf8 string

    walk = \\acc, _, idx ->
        bytes = List.sublist utf8 { start: idx, len: sliceLength }
        substr = Str.fromUtf8 bytes

        if (List.len bytes) == sliceLength then
            when substr is
                Ok s -> List.append acc s
                Err _ -> acc
        else
            acc

    if sliceLength > 0 then
        Str.walkUtf8WithIndex string [] walk
    else
        []

`}</code></pre>
        

            <h3><a name="space-age">Space Age</a></h3>
            <a href="/problems/space-age">Other "Space Age" solutions.</a>
            <pre><code class="language-roc">{`module [age]

Planet : [
    Mercury,
    Venus,
    Earth,
    Mars,
    Jupiter,
    Saturn,
    Uranus,
    Neptune,
]

earthYearSeconds = 31_557_600

age : Planet, Dec -> Dec
age = \\planet, seconds ->
    earthYears = seconds / earthYearSeconds
    earthYears / orbitalPeriod planet

orbitalPeriod = \\planet ->
    when planet is
        Mercury -> 0.2408467
        Venus -> 0.61519726
        Earth -> 1.0
        Mars -> 1.8808158
        Jupiter -> 11.862615
        Saturn -> 29.447498
        Uranus -> 84.016846
        Neptune -> 164.79132

`}</code></pre>
        

            <h3><a name="sublist">Sublist</a></h3>
            <a href="/problems/sublist">Other "Sublist" solutions.</a>
            <pre><code class="language-roc">{`module [sublist]

sublist : List U8, List U8 -> [Equal, Sublist, Superlist, Unequal]
sublist = \\list1, list2 ->
    if list1 == list2 then
        Equal
    else if isSublist list1 list2 then
        Superlist
    else if isSublist list2 list1 then
        Sublist
    else
        Unequal

isSublist = \\list1, list2 ->
    List.walkWithIndex
        list1
        Bool.false
        \\sublistFound, _, idx ->
            if sublistFound then
                sublistFound
                else

            attemptedSublist = List.sublist list1 { start: idx, len: List.len list2 }

            attemptedSublist == list2

`}</code></pre>
        

            <h3><a name="two-fer">Two Fer</a></h3>
            <a href="/problems/two-fer">Other "Two Fer" solutions.</a>
            <pre><code class="language-roc">{`module [twoFer]

twoFer : [Name Str, Anonymous] -> Str
twoFer = \\name ->
    word =
        when name is
            Anonymous -> "you"
            Name n -> n
    "One for $(word), one for me."
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>
    <script>
        Prism.languages['roc'] = Prism.languages['elm']
    </script>
<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
