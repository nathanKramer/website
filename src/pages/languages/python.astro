
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Python">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar hidden md:block">
    <h2>Python</h2>
    <p>Problems solved in python.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#binary-search-tree">Binary Search Tree</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#raindrops">Raindrops</a></li><li><a href="#run-length-encoding">Run Length Encoding</a></li><li><a href="#something">Something</a></li><li><a href="#two-fer">Two Fer</a></li></ul>
    </div>
    <div class="main md:ml-[300px] px-2">
    
            <h3><a name="binary-search-tree">Binary Search Tree</a></h3>
            <a href="/problems/binary-search-tree">Other "Binary Search Tree" solutions.</a>
            <pre><code class="language-python">{`def push_node(tree_node, datum):
    if not tree_node:
        return TreeNode(datum)
    return tree_node.push(datum)


class TreeNode:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

    def __str__(self):
        fmt = 'TreeNode(data={}, left={}, right={})'
        return fmt.format(self.data, self.left, self.right)

    def push(self, datum):
        if datum <= self.data:
            self.left = push_node(self.left, datum)
        else:
            self.right = push_node(self.right, datum)
        return self

    def dive(self):
        result = []
        if self.left:
            result += self.left.dive()
            result.append(self.data)
        else:
            result.append(self.data)

        if self.right:
            result += self.right.dive()
        return result


class BinarySearchTree:
    def __init__(self, tree_data):
        self.head = None
        for datum in tree_data:
            self.head = push_node(self.head, datum)

    def data(self):
        return self.head

    def sorted_data(self):
        return self.head.dive()
`}</code></pre>
        

            <h3><a name="hello-world">Hello World</a></h3>
            <a href="/problems/hello-world">Other "Hello World" solutions.</a>
            <pre><code class="language-python">{`def hello():
    return "Hello, World!"
`}</code></pre>
        

            <h3><a name="raindrops">Raindrops</a></h3>
            <a href="/problems/raindrops">Other "Raindrops" solutions.</a>
            <pre><code class="language-python">{`def convert(number):
    result = ""
    if (number % 3) == 0:
        result += "Pling"
    if (number % 5) == 0:
        result += "Plang"
    if (number % 7) == 0:
        result += "Plong"
    if result == "":
        result = str(number)
    return result
`}</code></pre>
        

            <h3><a name="run-length-encoding">Run Length Encoding</a></h3>
            <a href="/problems/run-length-encoding">Other "Run Length Encoding" solutions.</a>
            <pre><code class="language-python">{`from itertools import groupby


def decode(string):
    digits = ""
    acc = ""
    for c in string:
        if not c.isdigit():
            count = int(digits or 1)
            digits = ""
            acc += (c * count)
        else:
            digits += c
    return acc


def encode(string):
    def encode_group(k, g):
        count = len(list(g))
        if count == 1:
            return k
        return f"{count}{k}"

    return "".join([encode_group(k, g) for k, g in groupby(string)])
`}</code></pre>
        

            <h3><a name="something">Something</a></h3>
            <a href="/problems/something">Other "Something" solutions.</a>
            <pre><code class="language-python">{`def aFunction(number):
    return str(number)
`}</code></pre>
        

            <h3><a name="two-fer">Two Fer</a></h3>
            <a href="/problems/two-fer">Other "Two Fer" solutions.</a>
            <pre><code class="language-python">{`def two_fer(name="you"):
    return f"One for {name}, one for me."
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>
    <script>
        Prism.languages['roc'] = Prism.languages['elm']
    </script>
<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
