
---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Clojure">
<link rel="stylesheet" href="/css/prism.css" />
<link rel="stylesheet" href="/css/style.css" />
    <div class="side-bar">
    <h2>Clojure</h2>
    <p>Problems solved in clojure.</p>
    <ul>
      <li><a href="/exercism.html">Index</a></li>
    </ul>
    <ul><li><a href="#anagram">Anagram</a></li><li><a href="#armstrong-numbers">Armstrong Numbers</a></li><li><a href="#beer-song">Beer Song</a></li><li><a href="#binary-search">Binary Search</a></li><li><a href="#bob">Bob</a></li><li><a href="#cars-assemble">Cars Assemble</a></li><li><a href="#collatz-conjecture">Collatz Conjecture</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#isbn-verifier">Isbn Verifier</a></li><li><a href="#lucians-luscious-lasagna">Lucians Luscious Lasagna</a></li><li><a href="#pov">Pov</a></li><li><a href="#raindrops">Raindrops</a></li><li><a href="#reverse-string">Reverse String</a></li><li><a href="#rna-transcription">Rna Transcription</a></li><li><a href="#roman-numerals">Roman Numerals</a></li><li><a href="#run-length-encoding">Run Length Encoding</a></li><li><a href="#say">Say</a></li><li><a href="#series">Series</a></li><li><a href="#two-fer">Two Fer</a></li><li><a href="#word-count">Word Count</a></li></ul>
    </div>
    <div class="main">
    
            <h3><a name="anagram">Anagram</a></h3>
            <a href="/problems/anagram">Other "Anagram" solutions.</a>
            <pre><code class="language-clojure">{`(ns anagram
  (:require [clojure.string :refer [lower-case]]))

(defn is-anagram? [word1 word2]
  (let [w1 (lower-case word1)
        w2 (lower-case word2)
        different-words? (not= w1 w2)
        anagrams? (= (sort w1) (sort w2))]
    (and
     different-words?
     anagrams?)))

(defn anagrams-for [word prospect-list]
  (filter #(is-anagram? word %) prospect-list))
`}</code></pre>
        

            <h3><a name="armstrong-numbers">Armstrong Numbers</a></h3>
            <a href="/problems/armstrong-numbers">Other "Armstrong Numbers" solutions.</a>
            <pre><code class="language-clojure">{`(ns armstrong-numbers)

(defn digits [num]
  (map #(Character/digit % 10) (str num)))

(defn expt [x n]
  (reduce * (repeat n x)))

(defn armstrong? [n]
  (= n
    (reduce +
      (map
        (fn [x] (expt x (count (str n))))
        (digits n)))))
`}</code></pre>
        

            <h3><a name="beer-song">Beer Song</a></h3>
            <a href="/problems/beer-song">Other "Beer Song" solutions.</a>
            <pre><code class="language-clojure">{`(ns beer-song
  (:require [clojure.string :as str]))

(defn- generalised-verse [num]
  (format
   "%s bottles of beer on the wall, %s bottles of beer.\\nTake one down and pass it around, %s bottles of beer on the wall.\\n"
   num
   num
   (dec num)))

(defn verse
  "Returns the nth verse of the song."
  ([num]
   (case num
     0 "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"
     1 "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"
     2 "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"
     (generalised-verse num))))

(defn sing
  "Given a start and an optional end, returns all verses in this interval. If
  end is not given, the whole song from start is sung."
  ([start] (sing start 0))
  ([start end] (str/join "\\n"
                         (->>
                          (range start (dec end) -1)
                          (map verse)))))
`}</code></pre>
        

            <h3><a name="binary-search">Binary Search</a></h3>
            <a href="/problems/binary-search">Other "Binary Search" solutions.</a>
            <pre><code class="language-clojure">{`(ns binary-search)

(defn middle [coll]
  (quot (count coll) 2))

(defn search-for [item coll]
  (let [idx (middle coll)
        middle-value (nth coll idx)
        not-found-error (Exception. "not found")]
    (cond
      (= item middle-value) idx
      (= 1 (count coll)) (throw not-found-error)
      (< item middle-value) (search-for item (take idx coll))
      :else (+ idx (search-for item (drop idx coll))))))
`}</code></pre>
        

            <h3><a name="bob">Bob</a></h3>
            <a href="/problems/bob">Other "Bob" solutions.</a>
            <pre><code class="language-clojure">{`(ns bob
  (:require [clojure.string :refer [blank? ends-with? trim]]))

(defn is-question [s]
  (ends-with? s "?"))

(defn is-yelling [s]
  (let [alphas (filter #(Character/isLetter %) s)]
    (and
     (not-empty alphas)
     (every?
      #(Character/isUpperCase %)
      alphas))))

(defn response-for
  [input]
  (let [s (trim input)]
    (cond
      (blank? s) "Fine. Be that way!"
      (and (is-yelling s) (is-question s)) "Calm down, I know what I'm doing!"
      (is-question s) "Sure."
      (is-yelling s) "Whoa, chill out!"
      :else "Whatever.")))
`}</code></pre>
        

            <h3><a name="cars-assemble">Cars Assemble</a></h3>
            <a href="/problems/cars-assemble">Other "Cars Assemble" solutions.</a>
            <pre><code class="language-clojure">{`(ns cars-assemble)

(def cars-per-hr 221)

(defn production-rate
  "Returns the assembly line's production rate per hour,
   taking into account its success rate"
  [speed]
  (let [success-rate (cond (= speed 10) 0.77
                           (= speed 9) 0.8
                           (>= speed 5) 0.9
                           :else 1.0)
        base-rate (* speed cars-per-hr)]
    (* base-rate success-rate)))

(defn working-items
  "Calculates how many working cars are produced per minute"
  [speed]
  (let [minute-rate (/ (production-rate speed) 60)]
    (int minute-rate)))
`}</code></pre>
        

            <h3><a name="collatz-conjecture">Collatz Conjecture</a></h3>
            <a href="/problems/collatz-conjecture">Other "Collatz Conjecture" solutions.</a>
            <pre><code class="language-clojure">{`(ns collatz-conjecture)

(defn- next-collatz-num [num]
  (if
   (even? num)
    (/ num 2)
    (+ 1 (* num 3))))

(defn- collatz-support [step-count num]
  (cond
    (= num 1) step-count
    :else (let [next-num (next-collatz-num num)]
            (collatz-support (+ 1 step-count) next-num))))

(defn collatz [num]
  {:pre [(< 0 num)]}
  (collatz-support 0 num))
`}</code></pre>
        

            <h3><a name="hello-world">Hello World</a></h3>
            <a href="/problems/hello-world">Other "Hello World" solutions.</a>
            <pre><code class="language-clojure">{`(ns hello-world)

(defn hello [] "Hello, World!")
`}</code></pre>
        

            <h3><a name="isbn-verifier">Isbn Verifier</a></h3>
            <a href="/problems/isbn-verifier">Other "Isbn Verifier" solutions.</a>
            <pre><code class="language-clojure">{`(ns isbn-verifier
  (:require [clojure.string :as str]))

(defn sanitize-isbn [isbn]
  (let [lowered (str/lower-case isbn)
        sanitized (remove #(= \\- %)
                          (butlast lowered))]
    (concat sanitized [(last lowered)])))

(defn parse-isbn [sanitized]
  (map (fn [c] (if (= \\x c)
                 10
                 (Character/digit c 10))) sanitized))

(defn verify-isbn [parsed-isbn]
  (let [len (count parsed-isbn)
        formula-result (->> (range 0 len)
                            (map
                             (fn [i] (nth parsed-isbn i) * (- len i)))
                            (reduce +))]
    (= 0 (mod formula-result 11))))

(defn isbn? [isbn]
  (let [sanitized (sanitize-isbn isbn)
        valid-length? (= 10 (count sanitized))
        valid-structure? (every? #(Character/isDigit %) (take 9 sanitized))
        valid-check-digit? (let [check-digit (last sanitized)]
                             (or (= \\x check-digit) (Character/isDigit check-digit)))
        valid-input? (and valid-length? valid-structure? valid-check-digit?)
        parsed (parse-isbn sanitized)]
    (and valid-input? (verify-isbn parsed))))


(isbn? "3-598-21507-X")
`}</code></pre>
        

            <h3><a name="lucians-luscious-lasagna">Lucians Luscious Lasagna</a></h3>
            <a href="/problems/lucians-luscious-lasagna">Other "Lucians Luscious Lasagna" solutions.</a>
            <pre><code class="language-clojure">{`;; üëãüèΩ Hi there! Welcome to the Clojure Track.
;; The online test-runner is powered by babashka and the Small Clojure Interpreter (SCI).
;; Almost all language features are supported, with the exception of low-level constructs
;; like \`deftype\`, and certain Java classes. For more info, see:
;; https://github.com/babashka/babashka#differences-with-clojure

(ns lucians-luscious-lasagna)

(def expected-time 40)

(defn remaining-time
  "Takes the actual time in minutes the lasagna has been in the oven,
   and returns how many minutes the lasagna still has to remain in the oven."
  [actual-time]
  (- expected-time actual-time))

(defn prep-time
  "Takes the number of layers added to the lasagna,
   and returns how many minutes you spent preparing the lasagna"
  [num-layers]
  (* 2 num-layers))

(defn total-time
  "Takes the number of layers of lasagna and the actual time in minutes it has been in the oven.
   Returns how many minutes in total you've worked on cooking the lasagna"
  [num-layers actual-time]
  (+ (prep-time num-layers) actual-time))
`}</code></pre>
        

            <h3><a name="pov">Pov</a></h3>
            <a href="/problems/pov">Other "Pov" solutions.</a>
            <pre><code class="language-clojure">{`(ns pov)

(defn of [node tree]
  tree)

(defn path-from-to [])
`}</code></pre>
        

            <h3><a name="raindrops">Raindrops</a></h3>
            <a href="/problems/raindrops">Other "Raindrops" solutions.</a>
            <pre><code class="language-clojure">{`(ns raindrops)

(defn- substitute-factors-with [n substitutions]
  (let [factors (sort (keys substitutions))
        converted (map
                   (fn [factor]
                     (if (= 0 (mod n factor))
                       (get substitutions factor)
                       ""))
                   factors)
        s (apply str converted)]
    (if (empty? s)
      (str n)
      s)))

(defn convert [n]
  (substitute-factors-with n {3 "Pling"
                              5 "Plang"
                              7 "Plong"}))
`}</code></pre>
        

            <h3><a name="reverse-string">Reverse String</a></h3>
            <a href="/problems/reverse-string">Other "Reverse String" solutions.</a>
            <pre><code class="language-clojure">{`(ns reverse-string)

(defn reverse-string [s]
  (let [reversed-chars (into () s)] ;; https://clojuredocs.org/clojure.core/into
  (apply str reversed-chars)))
`}</code></pre>
        

            <h3><a name="rna-transcription">Rna Transcription</a></h3>
            <a href="/problems/rna-transcription">Other "Rna Transcription" solutions.</a>
            <pre><code class="language-clojure">{`;; Given a DNA strand, return its RNA complement (per RNA transcription) .

;; Both DNA and RNA strands are a sequence of nucleotides.

;; The four nucleotides found in DNA are adenine (A), cytosine (C), guanine (G) and thymine (T).
;; The four nucleotides found in RNA are adenine (A), cytosine (C), guanine (G) and uracil (U).
(ns rna-transcription)

(defn to-rna [dna]
  (let [dna-to-rna (fn [n] (condp = n
                             \\G \\C
                             \\C \\G
                             \\T \\A
                             \\A \\U
                             (assert false (format "%s is not a valid nucleotide" n))))]
    (apply str (map dna-to-rna dna))))
`}</code></pre>
        

            <h3><a name="roman-numerals">Roman Numerals</a></h3>
            <a href="/problems/roman-numerals">Other "Roman Numerals" solutions.</a>
            <pre><code class="language-clojure">{`(ns roman-numerals)

(def romans [[1000 "M"]
             [900 "CM"]
             [500 "D"]
             [400 "CD"]
             [100 "C"]
             [90 "XC"]
             [50 "L"]
             [40 "XL"]
             [10 "X"]
             [9 "IX"]
             [5 "V"]
             [4 "IV"]
             [1 "I"]])

(defn numerals [n]
  (loop [result []
         remaining n
         [[n roman] & rst] romans]
    (if (zero? remaining)
      (apply str result)
      (if (>= remaining n)
        (recur (conj result roman) (- remaining n) romans)
        (recur result remaining rst)))))
`}</code></pre>
        

            <h3><a name="run-length-encoding">Run Length Encoding</a></h3>
            <a href="/problems/run-length-encoding">Other "Run Length Encoding" solutions.</a>
            <pre><code class="language-clojure">{`(ns run-length-encoding)

(defn run-length-encode
  "encodes a string with run-length-encoding"
  [plain-text]
  (apply str (map (fn [chars]
                    (if (= (count chars) 1)
                      (apply str chars)
                      (str (count chars) (first chars))))
                  (partition-by identity plain-text))))

(defn run-length-decode
  "decodes a run-length-encoded string"
  [cipher-text]
  (let [grouped (partition-by #(Character/isDigit %) cipher-text)
        digit-char-pairs (partition 2 grouped)
        encoded? (< 2 (count digit-char-pairs))
        decode (apply str
                      (map (fn [[digits [c & cs]]]
                             (let [n (Integer/parseInt (apply str digits))]
                               (apply str
                                      (flatten (cons (repeat n c) cs)))))
                           digit-char-pairs))]
    (if encoded?
      decode
      cipher-text)))
`}</code></pre>
        

            <h3><a name="say">Say</a></h3>
            <a href="/problems/say">Other "Say" solutions.</a>
            <pre><code class="language-clojure">{`(ns say
  (:require [clojure.string :refer [join]]))

(def translations {1 "one"
                   2 "two"
                   3 "three"
                   4 "four"
                   5 "five"
                   6 "six"
                   7 "seven"
                   8 "eight"
                   9 "nine"
                   10 "ten"
                   11 "eleven"
                   12 "twelve"
                   13 "thirteen"
                   14 "fourteen"
                   15 "fifteen"
                   16 "sixteen"
                   17 "seventeen"
                   18 "eighteen"
                   19 "nineteen"
                   20 "twenty"
                   30 "thirty"
                   40 "forty"
                   50 "fifty"
                   60 "sixty"
                   70 "seventy"
                   80 "eighty"
                   90 "ninety"})

(def magnitudes
  [[1000000000 "billion"]
   [1000000    "million"]
   [1000       "thousand"]
   [100        "hundred"]])

(defn- next-magnitude
  [num]
  (first
   (drop-while
    (fn [[val _]] (> val num))
    magnitudes)))

(defn- say-compound-word
  [num]
  (let [small (rem num 10)
        big (- num small)
        components (filter not-empty (map translations [big small]))]
    (join "-" components)))

(defn- say
  [num]
  (cond
    (contains? translations num) (translations num)
    (< num 100) (say-compound-word num)
    :else (let [[magnitude magnitude-word] (next-magnitude num)
                quantity (long (/ num magnitude))
                remainder (rem num magnitude)
                components [(say quantity) magnitude-word (say remainder)]
                filtered-components (filter
                                     not-empty
                                     components)]
            (join " " filtered-components))))


;;; EXPORTS


;;; Translate a number in the range 0-999999999999 to english
(defn number
  [num]
  {:pre  [(>= num 0)
          (< num 999999999999)]}
  (if (= num 0)
    "zero"
    (say num)))
`}</code></pre>
        

            <h3><a name="series">Series</a></h3>
            <a href="/problems/series">Other "Series" solutions.</a>
            <pre><code class="language-clojure">{`(ns series)

(defn slices [s slice-length]
  (let [sliceable (> slice-length 0)
        sliced (map
                #(apply str %)
                (partition slice-length 1 s))]
    (if sliceable sliced [""])))

`}</code></pre>
        

            <h3><a name="two-fer">Two Fer</a></h3>
            <a href="/problems/two-fer">Other "Two Fer" solutions.</a>
            <pre><code class="language-clojure">{`(ns two-fer)

(defn two-fer
  ([] (two-fer "you"))
  ([name] (format "One for %s, one for me." (or name "you"))))
`}</code></pre>
        

            <h3><a name="word-count">Word Count</a></h3>
            <a href="/problems/word-count">Other "Word Count" solutions.</a>
            <pre><code class="language-clojure">{`(ns word-count
  (:require [clojure.string :refer [split lower-case]]))

(defn word-count [s]
  (let [words (split (lower-case s) #" ")
        grouped-words (group-by identity words)]
    (zipmap
     (keys grouped-words)
     (map count (vals grouped-words)))))
`}</code></pre>
        
    </div>

    <script src="/js/prism.js" isinline></script>

<style>
a[href] {
  color: #f15125;
}
</style>
</Layout>
